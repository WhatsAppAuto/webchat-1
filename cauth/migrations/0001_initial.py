# Generated by Django 2.2.9 on 2020-02-12 10:09

import cauth.models
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100, verbose_name='Descrição')),
                ('rangelist', models.TextField(help_text='Definir redes permitidas. Separar as regras por vírgula.                                               Ex: 192.168.0.0/23, 172.20.1.20', verbose_name='Redes')),
            ],
            options={
                'verbose_name': 'Host',
                'verbose_name_plural': 'Hosts',
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='UserAcl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=200, verbose_name='Descrição')),
                ('starttime', models.TimeField(blank=True, null=True, verbose_name='Horário Inicial')),
                ('stoptime', models.TimeField(blank=True, null=True, verbose_name='Horário Final')),
                ('netlist', models.TextField(blank=True, null=True, verbose_name='Redes')),
                ('w_mon', models.BooleanField(default=False, verbose_name='Segunda-feira')),
                ('w_tue', models.BooleanField(default=False, verbose_name='Terça-feira')),
                ('w_wed', models.BooleanField(default=False, verbose_name='Quarta-feira')),
                ('w_thu', models.BooleanField(default=False, verbose_name='Quinta-feira')),
                ('w_fri', models.BooleanField(default=False, verbose_name='Sexta-feira')),
                ('w_sat', models.BooleanField(default=False, verbose_name='Sábado')),
                ('w_sun', models.BooleanField(default=False, verbose_name='Domingo')),
            ],
            options={
                'verbose_name': 'Usuário - ACL',
                'verbose_name_plural': 'Usuários - ACL',
                'db_table': 'auth_useracl',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
            ],
            options={
                'verbose_name': 'Grupo',
                'verbose_name_plural': 'Grupos',
                'constraints': [],
                'indexes': [],
                'proxy': True,
                'ordering': ('name',),
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Obrigatório. Permitido Letras, números e caracteres @/./+/-/_.', max_length=100, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w.@+-]+$'), 'Entre com usuário válido.', 'invalid')], verbose_name='Usuário')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Nome')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('is_staff', models.BooleanField(default=True, help_text='Determina se o usuário pode acessar o sistema', verbose_name='Membro da Equipe')),
                ('is_active', models.BooleanField(default=True, help_text='Designa se este usuário deve ser tratado                                         como ativo. Desmarcar esta em vez de excluir contas.', verbose_name='active')),
                ('is_deleted', models.BooleanField(blank=True, default=False, verbose_name='Usuário Removido')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Data de Acesso')),
                ('ramal', models.CharField(blank=True, max_length=200, null=True, verbose_name='Tel. Ramal')),
                ('acls', models.ManyToManyField(blank=True, to='cauth.UserAcl', verbose_name='Controles')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', cauth.models.CustomUserManager()),
            ],
        ),
    ]
